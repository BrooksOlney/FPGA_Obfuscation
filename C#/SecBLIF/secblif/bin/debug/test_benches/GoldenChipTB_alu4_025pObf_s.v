/* Testbench auto-generated by EDA Tool */
module GoldenChip_alu4_025pObf_s ();


/* INPUTS */
reg [13:0] inputs = 0;
localparam MAX_COUNT = 16384;
reg [35:0] sk1;
reg [145:0] sk2;
/* OUTPUTS */
wire [7:0] outputs;
wire [7:0] obfusoutputs1;
wire [7:0] obfusoutputs2;
wire [7:0] mismatch1;
wire [7:0] mismatch2;
/* END NETS */

alu4_000pObf_s GoldenModule (.i_0_(inputs[0]), .i_1_(inputs[1]), .i_2_(inputs[2]), .i_3_(inputs[3]), .i_4_(inputs[4]), .i_5_(inputs[5]), .i_6_(inputs[6]), .i_7_(inputs[7]), .i_8_(inputs[8]), .i_9_(inputs[9]), .i_10_(inputs[10]), .i_11_(inputs[11]), .i_12_(inputs[12]), .i_13_(inputs[13]), 
.o_0_(outputs[0]), .o_1_(outputs[1]), .o_2_(outputs[2]), .o_3_(outputs[3]), .o_4_(outputs[4]), .o_5_(outputs[5]), .o_6_(outputs[6]), .o_7_ (outputs[7]));

alu4_025pObf_s ObfuscatedModule25 (.sk(sk1), .i_0_(inputs[0]), .i_1_(inputs[1]), .i_2_(inputs[2]), .i_3_(inputs[3]), .i_4_(inputs[4]), .i_5_(inputs[5]), .i_6_(inputs[6]), .i_7_(inputs[7]), .i_8_(inputs[8]), .i_9_(inputs[9]), .i_10_(inputs[10]), .i_11_(inputs[11]), .i_12_(inputs[12]), .i_13_(inputs[13]), 
.o_0_(obfusoutputs1[0]), .o_1_(obfusoutputs1[1]), .o_2_(obfusoutputs1[2]), .o_3_(obfusoutputs1[3]), .o_4_(obfusoutputs1[4]), .o_5_(obfusoutputs1[5]), .o_6_(obfusoutputs1[6]), .o_7_ (obfusoutputs1[7]));

alu4_050pObf_s ObfuscatedModule50 (.sk(sk2), .i_0_(inputs[0]), .i_1_(inputs[1]), .i_2_(inputs[2]), .i_3_(inputs[3]), .i_4_(inputs[4]), .i_5_(inputs[5]), .i_6_(inputs[6]), .i_7_(inputs[7]), .i_8_(inputs[8]), .i_9_(inputs[9]), .i_10_(inputs[10]), .i_11_(inputs[11]), .i_12_(inputs[12]), .i_13_(inputs[13]), 
.o_0_(obfusoutputs2[0]), .o_1_(obfusoutputs2[1]), .o_2_(obfusoutputs2[2]), .o_3_(obfusoutputs2[3]), .o_4_(obfusoutputs2[4]), .o_5_(obfusoutputs2[5]), .o_6_(obfusoutputs2[6]), .o_7_ (obfusoutputs2[7]));


assign mismatch1 = outputs ^ obfusoutputs1;
assign mismatch2 = outputs ^ obfusoutputs2;

real mismatchPercentage1 = 0;
real keyPercentageCorrect1 = 0;
real mismatchPercentage2 = 0;
real keyPercentageCorrect2 = 0;
integer f1, f2;
integer rk1, rk2;
integer i, j, k, l;
initial begin
	rk1 = $fopen("RNG1.txt", "r");
	rk2 = $fopen("RNG1.txt", "r");
	f1 = $fopen("functionalMismatchalu4_025pObf_s.txt", "w");
	f2 = $fopen("functionalMismatchalu4_050pObf_s.txt", "w");
end
initial begin
	for(i = 0; i < MAX_COUNT; i = i +1) begin
		for(l = 0; l < 10; l = l + 1) begin
			$fscanf(rk1, "%36b", sk1);
			$fscanf(rk2, "%146b", sk2);
			#1;
			for(j = 0; j < 8; j = j + 1) begin
				mismatchPercentage1 = mismatchPercentage1 + mismatch1[j];
			end
			for(j = 0; j < 8; j = j + 1) begin
                mismatchPercentage2 = mismatchPercentage2 + mismatch2[j];
            end
			for(k = 0; k < 36; k = k + 1) begin
				keyPercentageCorrect1 = keyPercentageCorrect1 + sk1[k];
			end
			for(k = 0; k < 145; k = k + 1) begin
                keyPercentageCorrect2 = keyPercentageCorrect2 + sk2[k];
            end
			keyPercentageCorrect1 = keyPercentageCorrect1 / 36;
			keyPercentageCorrect2 = keyPercentageCorrect2 / 146;
			mismatchPercentage1 = mismatchPercentage1 / 8;
			mismatchPercentage2 = mismatchPercentage2 / 8;
			#1;
			$fwrite(f1, "%f, %f\n", keyPercentageCorrect1, mismatchPercentage1);
			$fwrite(f2, "%f, %f\n", keyPercentageCorrect2, mismatchPercentage2);
			mismatchPercentage1 = 0;
			mismatchPercentage2 = 0;
			keyPercentageCorrect1 = 0;
			keyPercentageCorrect2 = 0;
		end
		inputs = inputs + 1;
		#1;
	end
	$fclose(f1);
	$fclose(f2);
	$finish;
end

endmodule
